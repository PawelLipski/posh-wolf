
function createMachineSchedArray() {
  var s = new Array(machineCnt)
  for (var i = 0; i < machineCnt; i++)
    s[i] = 1
  return s
}

function createNextOpForJobArray() {
  var s = new Array(jobCnt)
  for (var i = 0; i < jobCnt; i++)
    s[i] = 1
  return s
}

opWidth = 100
opHeight = 20

function createProgressBarForOp(opPbId, opLabelText) {
  
  opPb = $('<div id="' + opPbId + '" style="float: left"/>')

  opPb.progressbar({ value: 1 }).height(opHeight).css('width', '100%')
  opPb.find('.ui-progressbar-value').css('visibility', 'hidden')

  var opLabelId = opPbId + '-label'  
  var opLabelHtml = '<div style="display: table; position:absolute; top:0; left:0; width:100%; height:' + opHeight + 
    'px; overflow: hidden">' + 
    '<div id="' + opLabelId + '" style="display: table-cell; vertical-align: middle" >' +
    '<center><b>' + opLabelText + '</b></center> </div> </div>'
			      
  opPb.append(opLabelHtml)

  return opPb
}

function loadAnimationScaffolding() {

  var animContnr = $("#anim-container")
  
  animContnr.append('<table id="anim-jobs-table" width="100%"/>')
  animContnr.append('<button id="back-button" class="btn btn-large btn-primary">Back</button>')

  jobsTable = $("#anim-jobs-table")

  jobsTable.append('<tr style="border-bottom: solid lightgray 1px"><td colspan="3"><h1>Machine states</h1></tr>')

  jobsTable.append('<tr><td colspan="3"><table width="100%"><tr id="anim-machine-headers-tr"/>')  
  jobsTable.append('<tr id="anim-machines-tr"/>')
  jobsTable.append('</table></td></tr>')

  for (var i = 1; i <= machineCnt; i++)
    $("#anim-machine-headers-tr").append('<td id="anim-machine-td-' + i + '" width="20%">Machine #' + i + '</td>')

  jobsTable.append('<tr style="border-bottom: solid lightgray 1px"><td colspan="3"><h1>Job progress</h1></tr>')

  jobsTable.append('<tr><td/><td align="center"><h4><small><b>Complete</b></small></h4></td>' +
    '<td align="center"><h4><small><b>Pending</b></small></h4></td></tr>')
  jobsTable.append('<tr><td/><td/>' +
    '<td align="center"><table width="100%"><tr id="op-headers-tr"/></table></td></tr>')

  opHeaders = $("#op-headers-tr")
  for (var i = 1; i <= machineCnt; i++)
    opHeaders.append('<td width="20%" align="center"><h4><small>Operation #' + i + '</small></h4></td>')

  $("#back-button").click(function() {

    ongoingAnimationId++

    $("#anim-container").fadeOut(1000, function() {
      $("#task-anim-btn-contnr-" + taskId).show()
      $("#task-list-container").show()
    })
  })
}


function loadQueueForJob(jobId) {
  
  $("#anim-jobs-table").append('<tr ' + 
    ((jobId < jobCnt) ? 'style="border-bottom: solid lightgray 1px"' : '') + '>' + 
    '<td width="10%"><h3><small>Job #' + jobId + '</small></h3></td>' +
    '<td id="done-job-' + jobId + '" style="width: 45%"/>' +
    '<td id="waiting-job-' + jobId +  '" style="border-left: solid; width: 45%"></td>' +
    '</tr>')
  var waitingTd = $("#waiting-job-" + jobId)

  for (var o = 5; o >= 1; o--) {

    var opContnrId = 'job-' + jobId + '-op-' + o
    waitingTd.append('<div id="' + opContnrId + '" style="float: right; position: relative; ' + 
      'width: 18%; margin-left: 1%; margin-right: 1%; margin-top: 5px; margin-bottom: 5px"/>')
    var opContnr = $('#' + opContnrId)  
  
    var opPbId = 'job-' + jobId + '-op-' + o + '-pb'
    var opLabelText = taskDef[jobId - 1][o - 1]
                               
    opContnr.append(createProgressBarForOp(opPbId, opLabelText))
  }

}


function moveOpPbToDone(jobId, opId) { 
  var opContnr = $('#job-' + jobId + '-op-' + opId)

  opContnr.fadeOut(1000, function() {
    $(opContnr).detach().prependTo('#done-job-' + jobId).css('float', 'right').fadeIn(1000)
  })

}


function handleNextOpExecution(animationId, machineId) {

  if (ongoingAnimationId != animationId)
    return

  var schedIndex = currentSchedIndex[machineId - 1]
  var jobId = order[schedIndex - 1]
  var jobDuration = taskDef[jobId - 1][machineId - 1]

  var opPb = $('#job-' + jobId + '-op-' + machineId + '-pb .ui-progressbar-value')
  opPb.css('visibility', 'visible')

  opPb.animate({ width: 100 }, jobDuration * 50, function() {

    if (ongoingAnimationId != animationId)
      return

    moveOpPbToDone(jobId, machineId)
  
    currentSchedIndex[machineId - 1] = ++schedIndex
    nextOpForJob[jobId - 1] = machineId + 1

    if (schedIndex <= jobCnt) {
      var nextJobOnThisMachine = order[schedIndex - 1]

      if (nextOpForJob[nextJobOnThisMachine - 1] == machineId)
        handleNextOpExecution(animationId, machineId)
    }

    if (machineId < machineCnt) {

      var nextMachineId = machineId + 1
      var nextMachineSchedIndex = currentSchedIndex[nextMachineId - 1]
      
      if (nextMachineSchedIndex <= jobCnt) {
        var nextMachineJobToDo = order[nextMachineSchedIndex - 1]

        if (nextMachineJobToDo == jobId)          
          handleNextOpExecution(animationId, nextMachineId)
      }
    }
  })

}

$("#task-list-container").fadeOut(1000, function() {

  taskId = <%= params[:taskId] %>

  jobCnt = <%= @input[:job_count].to_i %>
  machineCnt = <%= @input[:machine_count].to_i %>
  
  taskDef = <%= @input[:op_durations_for_jobs].map { |x| x[:item].map { |x| x.to_i*20 } } %>  

  order = <%= @result[:job_order].map { |x| x.to_i } %>

  currentSchedIndex = createMachineSchedArray()
  nextOpForJob = createNextOpForJobArray()

  loadAnimationScaffolding()

  for (var job = 1; job <= jobCnt; job++)
    loadQueueForJob(job)

  $("#anim-container").fadeIn(1000, function() {
      handleNextOpExecution(ongoingAnimationId, 1)
  })

})


