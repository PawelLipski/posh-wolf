
function createMockOrder() {
  var order = new Array(machineCnt)
  for (var m = 0; m < machineCnt; m++) {
    order[m] = new Array(jobCnt)
    for (var j = 0; j < jobCnt; j++) {
      order[m][j] =  j+1
    }
  }
  return order
}

function createMachineSchedArray() {
  var s = new Array(machineCnt)
  for (var i = 0; i < machineCnt; i++)
    s[i] = 1
  return s
}

opWidth = 100
opHeight = 20

function loadAnimationScaffolding() {

  animContnr = $("#anim-container")

  animContnr.html('<div id="anim-machines-header" style="position: relative; left: 0; top: 0">' +
    '<h3><small>Machines</small></h3></div>')

  $("#anim-machines-header").append('<table id="anim-machines-table" width="100%"><tr id="anim-machines-tr"/></table>')
  for (var i = 1; i <= machineCnt; i++)
    $("#anim-machines-tr").append('<td id="anim-machine-td-' + i + '" width="20%">' + i + '</td>')

  animContnr.append('<table id="anim-jobs-table" width="100%"/>')
  animContnr.append('<button id="back-button" class="btn">Back</button>')

  $("#back-button").click(function() {
    $("#anim-container").fadeOut(1000, function() {
      $("#task-anim-btn-contnr-" + taskId).show()
      $("#task-list-container").show()
    })
  })
}

function loadQueueForJob(jobId) {
  $("#anim-jobs-table").append('<tr><td id="waiting-job-' + jobId +  '" style="border-right: solid; width: 50%"></td>' +
    '<td id="done-job-' + jobId + '" style="width: 50%"/></tr>')
  var waitingTd = $("#waiting-job-" + jobId)

  for (var i = 1; i <= machineCnt; i++) {

    var opContnrId = 'job-' + jobId + '-op-' + i
    waitingTd.append('<div id="' + opContnrId + '" style="float: left; position: relative; width: 20%"/>')
    var opContnr = $('#' + opContnrId)

      var opPbId = 'job-' + jobId + '-op-' + i + '-pb'
      opContnr.append('<div id="' + opPbId + '" style="float: left"/>')
      $("#" + opPbId).progressbar({value: 10*i})./*width(opWidth).*/height(opHeight).css('width', '100%')


      var opLabelId = 'job-' + jobId + '-op-' + i + '-label'

      var label = '<div style="display: table; position:absolute; top:0; left:0; width:100px; height:' + opHeight + 'px; overflow: hidden">' + 
        '<div id="' + opLabelId + '" style="display: table-cell; vertical-align: middle" > <center>foo</center> </div> </div>'
      opContnr.append(label)
  }

}


function moveOpPbToDone(jobId, opId) { 
  var opContnr = $('#job-' + jobId + '-op-' + opId)

  opContnr.fadeOut(1000, function() {
    $(opContnr).detach().prependTo('#done-job-' + jobId).fadeIn(1000)
  })

}


function handleNextOpExecution(machineId) {

  var schedIndex = currentSchedIndex[machineId - 1]
  var jobId = order[machineId - 1][schedIndex - 1]
  var opPb = $('#job-' + jobId + '-op-' + machineId + '-pb .ui-progressbar-value')

  opPb.animate({ width: 100 }, 2000, function() {

    moveOpPbToDone(jobId, machineId)
  
    currentSchedIndex[machineId - 1] = schedIndex + 1

    if (schedIndex < jobCnt)
      handleNextOpExecution(machineId)

    if (machineId < machineCnt) {

      var nextMachineId = machineId + 1
      var nextMachineSchedIndex = currentSchedIndex[nextMachineId - 1]
      
      if (nextMachineSchedIndex < jobCnt) {
        var nextMachineJobToDo = order[nextMachineId - 1][nextMachineSchedIndex - 1]

        if (nextMachineJobToDo == jobId)
          handleNextOpExecution(nextMachineId)
      }
    }
  })

}

$("#task-list-container").fadeOut(1000, function() {

  taskId = <%= params[:taskId] %> // TODO - czy nie bedzie problemow z synciem przy Back buttonie?

  jobCnt = 20
  machineCnt = 5 // TODO - input = eruby

  order = createMockOrder()

  currentSchedIndex = createMachineSchedArray()

  loadAnimationScaffolding()

  for (var job = 1; job <= jobCnt; job++)
    loadQueueForJob(job)

  $("#anim-container").fadeIn(1000, function() {
      handleNextOpExecution(1)
  })

})


