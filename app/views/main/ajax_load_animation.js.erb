
opWidth = 100
opHeight = 20


function createMockTaskDef() {
  var taskDef = new Array(jobCnt)
  for (var j = 0; j < jobCnt; j++) {
    taskDef[j] = new Array(machineCnt)
    for (var m = 0; m < machineCnt; m++) {
      taskDef[j][m] = (m == 1) ? 100 : 10
    }
  }
  return taskDef
}

function createMachineSchedArray() {
  var s = new Array(machineCnt)
  for (var i = 0; i < machineCnt; i++)
    s[i] = 1
  return s
}

function createNextOpForJobArray() {
  var s = new Array(jobCnt)
  for (var i = 0; i < jobCnt; i++)
    s[i] = 1
  return s
}


function createProgressBarForOp(opContnrId, opLabelText, css) {

  var opContnr = $('<div id="' + opContnrId + '" style="position: relative; ' +
      'margin-left: 1%; margin-right: 1%; margin-top: 5px; margin-bottom: 5px"/>')
  opContnr.css(css)

  var opPbId = opContnrId + '-pb'
  var opPb = $('<div id="' + opPbId + '" style="float: left"/>')

  opPb.progressbar({ value: 1 }).height(opHeight).css('width', '100%')
  opPb.find('.ui-progressbar-value').css('visibility', 'hidden')

  var opLabelId = opPbId + '-label'  
  var opLabelHtml = '<div style="display: table; position:absolute; top:0; left:0; width:100%; height:' + opHeight + 
    'px; overflow: hidden">' + 
    '<div id="' + opLabelId + '" style="display: table-cell; vertical-align: middle" >' +
    '<center><b><p id="text">' + opLabelText + '</p></b></center> </div> </div>'

  opContnr.append(opLabelHtml)
  opContnr.append(opPb)

  return opContnr
}

function loadAnimationScaffolding() {

  var animContnr = $('#anim-container')
  animContnr.html('')
  
  animContnr.append('<table id="anim-jobs-table" width="100%"/>')
  animContnr.append('<button id="back-button" class="btn btn-large btn-primary">Back</button>')

  jobsTable = $('#anim-jobs-table')

  jobsTable.append('<tr style="border-bottom: solid lightgray 1px"><td colspan="3"><h1>Overall progress</h1></tr>')
  jobsTable.append('<tr> <td colspan="3" id="overall"> </tr>')

  $('#overall').progressbar({ value: 0 }).width('100%')
  $('#overall .ui-progressbar-value').css({ 'transition': 'width 0.5s', '-webkit-transition': 'width 0.5s' })
                   
  jobsTable.append('<tr style="border-bottom: solid lightgray 1px"><td colspan="3"><h1>Machine states</h1></tr>')

  jobsTable.append('<tr><td colspan="3">' +
    '<table width="100%"><tr id="anim-machine-headers-tr"/>' + 
    '<tr id="anim-machines-tr"/>' +
    '</table></td></tr>')
  
  for (var i = 1; i <= machineCnt; i++)
    $('#anim-machine-headers-tr').append('<td width="' + headerWidth + '%" align="center">Machine #' + i + '</td>')

  var machineTr = $('#anim-machines-tr')
  var css = { float: 'center', width: '100%' }

  for (var i = 1; i <= machineCnt; i++) {    
    var machineTd = $('<td id="anim-machine-td-' + i + 
    '" style="width: ' + headerWidth + '%;' + 
    ' padding-left: 1%; padding-right: 1%; padding-top: 5px; padding-bottom: 5px"/>').appendTo(machineTr)
                                        
    machineTd.append(createProgressBarForOp('machine-' + i, 'Started', css))
  }

  jobsTable.append('<tr style="border-bottom: solid lightgray 1px"><td colspan="3"><h1>Job progress</h1></tr>')

  jobsTable.append('<tr><td/><td align="center"><h4><small><b>Complete</b></small></h4></td>' +
    '<td align="center"><h4><small><b>Pending</b></small></h4></td></tr>')
  jobsTable.append('<tr><td/><td/>' +
    '<td align="center"><table width="100%"><tr id="op-headers-tr"/></table></td></tr>')

  opHeaders = $("#op-headers-tr")
  for (var i = 1; i <= machineCnt; i++)
    opHeaders.append('<td width="' + headerWidth + '%" align="center"><h4><small>Op #' + i + '</small></h4></td>')

  $("#back-button").click(function() {

    ongoingAnimationId++

    $("#anim-container").fadeOut(1000, function() {
      $("#task-anim-btn-contnr-" + taskId).show()
      $("#task-list-container").show()
    })
  })
}



function loadQueueForJob(jobId) {
  
  var jobIsLast = jobId == order[jobCnt - 1]
  var bottomLine = !jobIsLast ? 'style="border-bottom: solid lightgray 1px"' : ''

  $("#anim-jobs-table").append('<tr id="job-tr-' + jobId + '" ' + bottomLine + '>' + 
    '<td width="10%"><h3><small>Job #' + jobId + '</small></h3></td>' +
    '<td id="done-job-' + jobId + '" style="width: 45%"/>' +
    '<td id="waiting-job-' + jobId +  '" style="border-left: solid; width: 45%"></td>' +
    '</tr>')
  var waitingTd = $('#waiting-job-' + jobId)
  
  var css = { float: 'right', width: '18%' }
  for (var o = machineCnt; o >= 1; o--) {

    var opContnrId = 'job-' + jobId + '-op-' + o
    var opLabelText = taskDef[jobId - 1][o - 1]
  
    waitingTd.append(createProgressBarForOp(opContnrId, opLabelText, css))
  }

}


function moveOpPbToDone(jobId, opId, animationId) { 
  var opContnr = $('#job-' + jobId + '-op-' + opId)

  opContnr.fadeOut(1000, function() {
                                     
    if (ongoingAnimationId != animationId)
      return
                                    
    $(opContnr).detach().prependTo('#done-job-' + jobId)
      .css('float', 'right').fadeIn(1000, function() {
                                                      
	if (ongoingAnimationId != animationId)
	  return
                                                     
	if (opId == machineCnt)
	  $('#job-tr-' + jobId).fadeOut(1000)
      })                                               
                                   
  })

}


function handleNextOpExecution(animationId, machineId, timePassed) {

  if (ongoingAnimationId != animationId)
    return  

  var schedIndex = currentSchedIndex[machineId - 1]
  var jobId = order[schedIndex - 1]
  var jobDuration = taskDef[jobId - 1][machineId - 1]

  var opPb = $('#job-' + jobId + '-op-' + machineId + '-pb .ui-progressbar-value')
  opPb.css('visibility', 'visible')

  var machinePb = $('#machine-' + machineId + '-pb .ui-progressbar-value')
  machinePb.css('visibility', 'visible')
  machinePb.animate({ width: '100%' }, jobDuration * 50)

  var machineLabel = $('#machine-' + machineId + '-pb-label').find('#text')  
  machineLabel.html('Job #' + jobId)

  opPb.animate({ width: '100%' }, jobDuration * 50, function() {
                                                                
    if (ongoingAnimationId != animationId)
      return                                                                       
                                                               
    timePassed += jobDuration                                                           
    if (overallTime < timePassed) {
      overallTime = timePassed                             
      $('#overall').progressbar({ value: timePassed / executionTimespan * 100 })
    }                              

    moveOpPbToDone(jobId, machineId, animationId)
                                                                                               
    machinePb.css({visibility: 'hidden', width: 0})    
                                                               
    currentSchedIndex[machineId - 1] = ++schedIndex
    nextOpForJob[jobId - 1] = machineId + 1

    if (schedIndex <= jobCnt) {
      var nextJobOnThisMachine = order[schedIndex - 1]

      if (nextOpForJob[nextJobOnThisMachine - 1] == machineId)
        handleNextOpExecution(animationId, machineId, timePassed)
      else
	machineLabel.html('Idle')
    } else
      machineLabel.html('Finished')    

    if (machineId < machineCnt) {

      var nextMachineId = machineId + 1
      var nextMachineSchedIndex = currentSchedIndex[nextMachineId - 1]
      
      if (nextMachineSchedIndex <= jobCnt) {
        var nextMachineJobToDo = order[nextMachineSchedIndex - 1]

        if (nextMachineJobToDo == jobId)          
          handleNextOpExecution(animationId, nextMachineId, timePassed)
      }
    }          
  })

}

$("#task-list-container").fadeOut(1000, function() {

  taskId = <%= params[:taskId] %>

  jobCnt = <%= @input[:job_count].to_i %>
  machineCnt = <%= @input[:machine_count].to_i %>
                                                   
  executionTimespan = <%= @result[:execution_timespan] %>
  overallTime = 0                                                   
  
  taskDef = createMockTaskDef()
  // <%= @input[:op_durations_for_jobs].map { |x| x[:item].map { |x| x.to_i*20 } } %>  

  order = <%= @result[:job_order].map { |x| x.to_i }.shuffle %>

  currentSchedIndex = createMachineSchedArray()
  nextOpForJob = createNextOpForJobArray()

  headerWidth = 100.0 / machineCnt                                                   
  loadAnimationScaffolding()

  for (var i = 1; i <= jobCnt; i++)
    loadQueueForJob(order[i - 1])

  $("#anim-container").fadeIn(1000, function() {
      handleNextOpExecution(ongoingAnimationId, 1, 0)
  })

})


