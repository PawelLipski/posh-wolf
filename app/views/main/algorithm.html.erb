
<h1> Cuckoo algorithm for the Flow Shop problem </h1>

<table width="70%" align="center"> <tr> <td>

<p class="doc"> We solve the problem by the means of optimization algorithm known as <b>cuckoo search</b>, elaborated by 
<%= link_to "Xin-She Yang and Suash Deb in 2009", "http://arxiv.org/pdf/1003.1594.pdf" %>.
It is inspired by brood parisitism of certain cuckoo species. 
Candidate solutions are represented by <b>eggs</b>, located in <b>nests</b>. 
In the version of the algorithm which is used to solve the flow shop problem in Posh Wolf, <b>each nest keeps at most one egg</b>. 
What provide new candidates are the cuckoos, each of them <b>holding one such candidate</b> solution instance.
</p>

<p class="doc">
As soon as initial nests and cuckoos population is generated, optimization process starts. 
In every single iteration, a <b>single cuckoo</b> is randomly chosen and its solution is modified in a random way. 
Various strategies are employed to modification. 
Yang and Deb prove in their article that the optimal one are so-called <b>Lévy flights</b>, but we did not follow this path due to implementational difficulties. 
Posh Wolf uses simple random walk instead - a modified egg (solution) is placed in a <b>randomly chosen nest</b>, if only it surpasses the egg that was placed there before.
At the end of each iteration, a number of the <b>worst solution candidates is removed</b> and substituted with randomly generated ones.
</p>

<p class="doc">
Solution quality is estimated using a target function - and in the case of flow shop problem it is the <b>total execution timespan</b>. 
The algorithm aims, of course, to minimize this value, i.e. to minimize the time that passes <b>between the first job starts and the very last jobs completes</b>.
</p>

<p class="doc">
The general outline of algorithm, as proposed by Yang &amp; Deb, is as follows:
</p>

<b>begin</b>
  Objective function f(x), x = (x1, ..., xd)
  T
  Generate initial population of
  n host nests xi (i = 1,2, ..., n)
  while (t &lt; MaxGeneration) or (stop criterion)
  Get a cuckoo randomly by L´evy ﬂights
  evaluate its quality/ﬁtness Fi
  Choose a nest among n (say, j) randomly
  if (Fi &gt; Fj),
  replace j by the new solution;
  end
  A fraction (pa) of worse nests
  are abandoned and new ones are built;
  Keep the best solutions
  (or nests with quality solutions);
  Rank the solutions and ﬁnd the current best
  end while
  Postprocess results and visualization
<b>end</b>

</td> </tr> </table>


