
<h1> Cuckoo algorithm for the Flow Shop problem </h1>

<table width="70%" align="center"> <tr> <td>

<p class="doc"> We solve the problem by the means of optimization algorithm known as <b>cuckoo search</b>, elaborated by 
<%= link_to "Xin-She Yang and Suash Deb in 2009", "http://arxiv.org/pdf/1003.1594.pdf" %>.
It is inspired by brood parisitism of certain cuckoo species. 
Candidate solutions are represented by <b>eggs</b>, located in <b>nests</b>. 
In the version of the algorithm which is used in Posh Wolf, <b>each nest keeps at most one egg</b>. 
What provides new candidates are the cuckoos, each of them <b>holding one such candidate</b> solution instance.
</p>

<p class="doc">
As soon as initial nests and cuckoos population are generated, optimization process starts. 
In every single iteration, <b>one cuckoo</b> is randomly chosen and its solution is modified in a random way. 
Various strategies are employed to this modification. 
Yang and Deb prove in their article that the optimal strategy are so-called <b>Lévy flights</b>, but we did not follow this path due to implementational difficulties. 
Posh Wolf uses simple random walk instead - a modified egg (solution) is placed in a <b>randomly chosen nest</b> (if only it surpasses the egg that was placed there before).
At the end of each iteration, a number of the <b>worst solution candidates is removed</b> and substituted with randomly generated ones.
</p>

<p class="doc">
Solution quality is estimated using a target function - for flow shop problem it is defined as the <b>total execution timespan</b>. 
The algorithm aims, of course, at minimizing this value, i.e. at minimizing the time that passes <b>between the first job starts and the very last jobs completes</b>.
</p>

<p class="doc">
The general outline of algorithm, as proposed by Yang &amp; Deb, is as follows:
</p>

<table style="font-family: 'Book Antiqua'; font-size: large; margin-top: 30px; line-height: 1.5" align="center"> <tr> 
<td style="border-top: 1px solid lightgray; border-bottom: 1px solid lightgray">
<b>begin</b>
  <span style="display: block; margin-left: 20px">
  
  Objective function f(<i>x</i>), <i>x</i> =
  (<i>x<sub>1</sub></i>, ..., <i>x<sub>d</sub></i>) <sup>T</sup> <br/>
  
  Generate initial population of <i>n</i> host nests <i>x<sub>i</sub></i>,
  <i>i</i> = 1, 2, ..., <i>n</i> <br/>
  
  <b>while</b> (<i>t </i>&lt; MaxGeneration) <b>or</b> (stop criterion)

    <span style="display: block; margin-left: 40px">

    Get a cuckoo randomly (possibly by Lévy flights) <br/>
    Evaluate its quality/fitness <i>F<sub>i</sub></i> <br/>
    Choose a nest among <i>n </i>(say, <i>j</i>) randomly <br>

    <b>if</b> <i>F<sub>i</sub></i> &gt; <i>F<sub>j</sub></i> <br>

      <span style="display: block; margin-left: 60px">
      Replace <i>j</i> by the new solution
      </span>
 
    <b>end</b> <br>

    A fraction (p<sub>a</sub>) of worse nests are abandoned and new ones are built <br>
    Keep the best solutions (or nests with quality solutions) <br>
    Rank the solutions and ﬁnd the current best 

    </span>
  
  <b>end while</b>

  </span>
<b>end</b>
</td> </tr> </table>

</td> </tr> </table>


