
<h1> The architecture of this system </h1>

<table width="100%">

<tr>
  <td colspan="4" align="center" style="padding-bottom: 30px; padding-top: 30px">
    <table width="90%"> <tr>
      <td class="mod-hdr"> Client-side </td>
      <td class="prot-hdr"> 
        <% img = image_tag "/assets/arrows.gif", width: 60, height: 60 %> 
        <%= img %>
        AJAX 
      </td>
      <td class="mod-hdr"> Web app </td>
      <td class="prot-hdr"> 
        <%= img %>
        SOAP 
      </td>
      <td class="mod-hdr"> Web service </td>
      <td class="prot-hdr"> 
        <%= img %>
        (directly)
      </td>
      <td class="mod-hdr"> Back-end </td>
    </tr> </table>
  </td>
</tr>

<tr>
  <td class="mod-descr">
  Web interface for task scheduling and visualization of flow shop execution.
  Connects to the web application mainly via AJAX requests.
  Uses jQuery and Twitter Bootstrap.
  </td>

  <td class="mod-descr">
  Web app built with Ruby on Rails.
  Handles requests from browsers wrapping them in SOAP envelope (through the use of Savon gem) and passes to the web service.
  Deployed to the Heroku cloud. Running on the Unicorn HTTP server to enable handling multiple HTTP requests simultaneously. 
  </td> 

  <td class="mod-descr"> 
  SOAP web service, implemented in Scala with JAX-WS. Employs Scala actors to asynchronous task scheduling and execution. 
  Offers Web API, which enables enqueueing flow shop tasks, checking progress and partial results for ongoing tasks and retrieving result for the complete ones. 
  Hosted on Heroku cloud.
  </td>

  <td class="mod-descr"> 
  Cuckoo algorithm implemented in Java by Aleksander Książek and Przemysław Burczyk.
  A detailed description may be found <%= link_to "here", "algorithm" %>.
  Thanks to Java/Scala bytecode compatibility, back-end is simply stored as a part of the web service.
  </td> 
</tr>

</table>

